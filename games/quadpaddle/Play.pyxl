Play
============================================================================

// Padding at corners on paddle movement
const padding = 25.5

def hitBox(box, ball, dir):
   if not box.breakable:
      shakeEntity(box, 3, 2 dir)
      playAudioClip(unbreakableSound)
      return

   shakeScreen(5, 2 dir)
   playAudioClip(destroyBlockSound)
   increaseScore(100)
   entityToParticlesHit(box, ½ (box.pos + ball.pos), ball.vel, 0.1, 0.5, 50)
   removeValues(boxArray, box)
  
   // Increase the speed of this ball slightly with each hit
   if magnitude(ball.vel) < 2.3: ball.vel *= 1.09   

   // Spawn a powerup
   if rnd() < powerupDropChance:
      playAudioClip(powerupSpawnSound)
      const a = 90° rndInt(3)
      // The sprite is not actually used for rendering, just for collisions
      push(powerupArray, makeEntity({pos: box.pos,
                                     vel: ¾ xy(cos a, sin a),
                                     sprite: sparkleSprite[0][0],                                       
                                     data:rndValue(powerupData)}))

def loseBall(ball):
   playAudioClip(loseBallSound)
   if size(ballArray) == 1:
      if spareBalls == 0:
         // Melt the paddles away from the center of the screen
         for P in paddleArray:
            const v = otherAxis[P.axis]
            let dir = xy(0,0)
            dir[v] = sign(P.pos[v] - areaSize / 2);
            entityToParticlesMelt(P, dir, 0.05, 0.08, 150)
         setMode(GameOver) because "Lost last ball"
         
      // Put the ball back on a paddle, chosen at random
      --spareBalls
      ball.paddle = rndValue(paddleArray)
   else:
      // Remove this ball; there are others in play
      removeValues(ballArray, ball)


      
frame
────────────────────────────────────────────────────────────────────────────

setBackground(backgroundColor)
resetClip()

let levelComplete = true

// Process particles without clipping. This allows
// some particles to explode over the scoreboard.
processParticles()

setClip(xy(0, 0), xy(areaSize, screenSize.y))

// Paddles
for pad, pos, vel, axis in paddle in paddleArray:
   vel[axis] = paddleSpeed * pad[axis]
   pos[axis] = mid(pos[axis] + vel[axis], ½ paddle.size.x + padding, areaSize - ½ paddle.size.x - padding)
   drawEntity(paddle)
   // Sparkle when this paddle has the catch powerup
   if paddle.powerup == "catch":
      drawSprite(paddleSprite[0][5], paddle.pos, paddle.angle)
      drawSprite(sparkleSprite[0][⌊modeFrames / 6⌋ mod 5], paddle.pos, paddle.angle)
      drawSprite(sparkleSprite[0][⌊modeFrames / 5⌋ mod 5], paddle.pos + xy(1, 1), paddle.angle + 180°)

   
// Boxes
for B in boxArray:
   if B.breakable: levelComplete = false
   drawEntity(B)


// Powerups
for pos, vel, data ∊ P ∊ powerupArray:
   drawText(font, data.name, pos + xy(0, 3), data.color, nil, #FFF, 0)
   drawSprite(sparkleSprite[0][⌊modeFrames / 6⌋ mod 5], pos)
   drawSprite(sparkleSprite[0][⌊modeFrames / 5⌋ mod 5], pos + xy(1, 1), 180°)
   createParticle(pos + xy(32 ξ - 16, 16 ξ - 8), xy(0, 0), data.color, 0, 30)
   createParticle(pos + xy(32 ξ - 16, 16 ξ - 8), xy(0, 0), #fff, 0, 20)
   pos += vel
   if ((pos.x < -½ sparkleSprite[0][0].size.x) or (pos.x > screenSize.x + ½ sparkleSprite[0][0].size.x) or
       (pos.y < -½ sparkleSprite[0][0].size.y) or (pos.y > screenSize.y + ½ sparkleSprite[0][0].size.y)):
      removeValues(powerupArray, P)

   for paddle ∊ paddleArray:
      // Receive a powerup
      if overlaps(paddle, P):
         removeValues(powerupArray, P)
         playAudioClip(powerupSound)

         // Remove the old powerup's boxes before replacing the powerup
         if paddle.powerup and paddle.powerup.name == "wall":
            for box in paddle.powerup.boxArray:
               removeValues(boxArray, box)
            
         paddle.powerup = ∅
         if data.name == "spare":
            spareBalls = min(spareBalls + 1, maxSpareBalls)
         else if data.name == "2500":
            increaseScore(2500)
         else if data.name == "1000":
            increaseScore(1000)
         else if data.name == "split":
            for B in ballArray:
               if not B.paddle:
                  for i < 2:
                     push(ballArray, makeEntity({name:"ball", pos:B.pos, vel:(2i - 1) * xy(-B.vel.y,  B.vel.x), sprite:B.sprite, paddle:nil, shape:B.shape}))
         else if data.name == "wall":
            // Create a wall of unbreakable boxes
            paddle.powerup = {name: "wall", boxArray:[]}
            let pos = xy(0, 0)
            const u = paddle.axis
            const v = otherAxis[u]
            const away = sign(paddle.pos[v] - ½ areaSize);
            for i < 11:
               pos[u] = 16 i + 32
               pos[v] = paddle.pos[v] + 8 away
               // Put the wall behind the paddle
               const box = makeEntity({name:"wall", breakable:false, pos:pos, sprite:darkUnbreakable, z:-1})
               // Make sure that the box isn't trapping a ball
               for ball in ballArray: if overlaps(box, ball): loseBall(ball)
               push(paddle.powerup.boxArray, box)
               push(boxArray, box)
         else if data.name == "catch":
            paddle.powerup = "catch"

         for i < 180:
            const a = 2° i
            createParticle(pos + xy(8 cos a, 4 sin a), xy(2 cos a, sin a), #fff, 1, 35)
            createParticle(pos + xy(8 cos a, 4 sin a), 0.95 * xy(2 cos a, sin a), data.color, 1, 50)
         


// Balls
for pos, vel, paddle in ball in ballArray:
   if paddle:
      // This ball is on a paddle, waiting to
      // be launched. Follow the paddle's position.
      const u = paddle.axis
      const v = otherAxis[u]
      const away = sign(½ areaSize - paddle.pos[v]);
      pos[u] = paddle.pos[u]
      pos[v] = paddle.pos[v] + away * ½ (paddle.sprite.size.y + ball.sprite.size.y)

      if paddle.pad.aa or paddle.pad.bb or paddle.pad.cc or paddle.pad.dd:
         firstBallLaunched = true
         
         // Release the ball away from the paddle
         if |paddle.vel[u]| > 0.1:
            // Throw in direction of movement
            vel[u] = sign(paddle.vel[u])
         else:
            // Random direction
            vel[u] = 2 rndInt(1) - 1
            
         vel[v] = away
         vel *= initialBallSpeed
         paddle = ∅
   else: // Normal ball movement. Look for collisions.

      let speed = ‖ball.vel‖

      // Spawn trails
      for i < 3:
         createParticle(pos + 5 xy(ξ - ½, ξ - ½),
                        ½ vel * ξ,
                        if i < 2 then #89a else #c,
                        -½,
                        20 ξ + 15)
      
      // Move first in X
      pos.x += vel.x
   
      // Back up and reverse direction on box collision, which
      // must be due to ball movement.
      for box ∊ boxArray:
         if overlaps(ball, box):
            hitBox(box, ball, xy(1, 0))
            pos.x -= vel.x; vel.x = -vel.x
   
      // Now, move second in Y
      pos.y += vel.y
   
      for box ∊ boxArray:
         if overlaps(ball, box):
            hitBox(box, ball, xy(0, 1))
            pos.y -= vel.y; vel.y = -vel.y
   
      // Bounce off paddles by moving away from the intersection
      for paddle ∊ paddleArray:
         if overlaps(ball, paddle):
            if paddle.powerup == "catch":
               ball.paddle = paddle
            else:
               const u = paddle.axis
               const v = otherAxis[paddle.axis]
   
               // Don't intersect if already moving away.
               if sign(pos[v] - paddle.pos[v]) ≠ sign(vel[v]):
                  playAudioClip(hitPaddleSound);

                  // Push the paddle back for three frames
                  paddle.offset[u] = 0
                  paddle.offset[v] = sign(vel[v])
               
                  def zero(): paddle.offset = xy(0, 0)
                  addFrameHook(∅, zero, 3)
               
                  // Bounce
                  vel[v] = -vel[v]
               
                  // Friction
                  vel[u] += 20% paddle.vel[u]
   
                  // Maintain constant speed
                  vel = direction(vel) * speed
   
                  // Give bonus points for hitting with
                  // a moving paddle
                  increaseScore(25 |paddle.vel[u]| + 25)
      
      //////////////////////////////////
      const radius = ½ ball.size.x
      if pos.x < -radius or pos.x > areaSize + radius or pos.y < -radius or pos.y > areaSize + radius:
         loseBall(ball)
         
   // Common
   drawEntity(ball)

if firstBallLaunched:
   timeLeft = max(0, timeLeft - 1 / 60)

// Scores
drawScoreboard()

if levelComplete:
   ++finishLevelFrames
   if finishLevelFrames > 40:
      if level ≥ (levelTemplate.width + 1) / 6:
         setMode(Win) because "Beat final level"
      else:
         increaseScore(100 timeLeft)
         // Show the reward screen
         pushMode(BeatLevel) because "Level completed"
