_SetControls64
════════════════════════════════════════════════════════════════════════
// Choose the active player

const windowBackgroundColor = #135
const windowBorderColor     = #fff
const textColor             = #fff
const textShadowColor       = #0006
const promptColor           = #4DF
const selectedColor         = #f
const unselectedColor       = #b

const openFrames            = 8

const font = _font5
const lineHeight = round(110% font.lineHeight) + 1

let choiceArray = ["P1", "P2", "P3", "P4", "Done"]
let choiceIndex



enter
────────────────────────────────────────────────────────────────────────
choiceIndex = 0



frame
────────────────────────────────────────────────────────────────────────

drawPreviousMode()
// Force the clipping range beyond what the API normally allows
_clipZ2 = 2049
setTransform(xy(0, 0), xy(1, 1), 2048.6, 1)

const windowSize = round(xy(26, 50) * clamp((modeFrames + 1) / openFrames, 0%, 100%))
drawRect(½ screenSize, windowSize, windowBackgroundColor, windowBorderColor)

if modeFrames > openFrames:
   // Process input
   for control in pad:
      if control.qq or control._pp:
         // Do NOT use "bb", which maps to enter on the keyboard
         // and may make players think they are executing a command
         playAudioClip(_cancelUISound)
         popMode()
      else if control.aa:
         playAudioClip(_acceptUISound)
         if choiceIndex == size(choiceArray) - 1:
            popMode()
         else:
            pushMode(_SetControls, choiceIndex)
      else if control.yy:
         const prev = choiceIndex
         choiceIndex = clamp(choiceIndex + control.yy, 0, size(choiceArray) - 1)
         playAudioClip(if prev == choiceIndex then _denyUISound else _moveUISound)

   // Draw options
   let y = 17
   for i < size(choiceArray):
      const active      = choiceIndex == i
      const bright      = (1 + cos(modeFrames / 9)) / 2
      const color       = if active then lerp(promptColor, #fff, 50% bright) else unselectedColor
      const outline     = if active then rgba(1,1,1, 25% bright) else nil
      const yOffset     = if active then -1 else 0
      const shadow      = if active then 50% textShadowColor else textShadowColor
      
      const x           = 27
      const text        = choiceArray[i]
      drawText(font, text, xy(x, y + 1), shadow, nil, nil, "left", "center")
      drawText(font, text, xy(x, y + yOffset), color, nil, outline, "left", "center")
   
      if active:
         drawText(font, "✜", xy(x - 40% lineHeight + 1, y + 1), shadow, nil, nil, "right", "center")
         drawText(font, "✜", xy(x - 40% lineHeight + 1, y + yOffset), color, nil, outline, "right", "center")
         
      y += lineHeight


